name: Build and upload release

on:
    workflow_dispatch: # trigger manually
        inputs:
            tag_override:
                description: "Tag"
                type: string
                required: false

env:
    node_version: "16.x"

jobs:
    build-and-upload-release:
        runs-on: ubuntu-latest
        steps:
            - name: Apply tag override and parse ref
              uses: bisgardo/github-action-parse-ref@v1
              id: ref
              with:
                  ref: "${{github.event.inputs.tag_override || github.ref}}"
                  default-ref-type: tags
            - name: Fail if ref is not a tag
              if: "steps.ref.outputs.ref-type != 'tags'"
              run: exit 1
            - name: Parse tag name
              uses: bisgardo/github-action-regex-parse@v1
              id: tag
              with:
                  pattern: "(?<name>(?<package>.*?)/(?<version>.*))"
                  input: "${{steps.ref.outputs.ref-name}}"
            - name: Checkout project
              uses: actions/checkout@v3
              with:
                ref: "${{steps.ref.outputs.ref}}"
            - name: Extract tag message
              id: tag-msg
              run: |
                  msg="$(git for-each-ref "${{steps.ref.outputs.ref}}" --format='%(contents)')"
                  echo "msg<<EOT
                  ${msg}
                  EOT" >> "${GITHUB_OUTPUT}"
            - name: Fail if tag is not "annotated" or its message is empty
              if: "steps.tag-msg.outputs.msg == ''"
              run: exit 1
            - name: Resolve workspace name and path of package
              id: package
              run: |
                  workspace=@concordium/${{steps.tag.outputs.package}}
                  name=${{steps.tag.outputs.package}}
                  version="$(npm pkg get version --workspaces | jq -r ".[\"${workspace}\"]")"
                  echo "
                  name=${name}
                  version=${version}
                  workspace=${workspace}
                  path=./packages/${{steps.tag.outputs.package}}
                  pack-file=concordium-${name}-${version}.tgz
                  github-release-name=${name}: ${{steps.package.outputs.version}}
                  " >> "${GITHUB_OUTPUT}"
            - name: Check that tag version matches 'package.json' up to build version
              run: |
                  [[ "${{steps.tag.outputs.version}}" = "${{steps.package.outputs.version}}"-* ]]
            - name: Setup Node
              uses: actions/setup-node@v3
              with:
                  node-version: "${{env.node_version}}"
                  cache: yarn
            - name: Run yarn install
              run: yarn install --immutable
            # TODO Find a way to force target lib to not build against local build of dependent lib, but always against published build.
            - name: Build all libraries
              run: yarn build
            - name: Archive target library
              run: npm pack --workspace="${{steps.package.outputs.workspace}}"
            - name: Publish library to npm [dry run]
              run: npm publish --dry-run "${{steps.package.outputs.pack-file}}"
            - name: Extract changelog entries
              uses: concordium/github-action-changelog-extract@v1
              id: changelog
              with:
                  file: "${{steps.tag.outputs.path}}/CHANGELOG.md"
                  version: "${{steps.package.outputs.version}}"
            - name: Upload package as GitHub release
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: "${{steps.tag.outputs.name}}"
                  # Release body is the message of the annotated tag followed by the changelog entries for the version.
                  body: |
                      ${{steps.tag-msg.outputs.msg}}
                      
                      # Changelog
                      
                      ${{steps.changelog.outputs.section}}
                  files: "${{steps.package.outputs.pack-file}}"
                  name: "${{steps.package.outputs.github-release-name}}"
                  # The method for auto-generating release notes just lists all commits (including those not relevant to the subproject).
                  generate_release_notes: false
